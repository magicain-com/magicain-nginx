version: '3.8'

services:
  # Nginx Reverse Proxy
  nginx-proxy:
    build: .
    ports:
      - "80:80"
    depends_on:
      - backend
      - langfuse
    networks:
      - magicain-network
    restart: unless-stopped
    volumes:
      - ./logs/nginx:/var/log/nginx

  # Agent UI Frontend
  agent-ui:
    image: crpi-yzbqob8e5cxd8omc.cn-hangzhou.personal.cr.aliyuncs.com/magictensor/agent-ui:main
    ports:
      - "7001:4173"
    networks:
      - magicain-network
    restart: unless-stopped
    environment:
      - NODE_ENV=production

  # Backend Java Application
  backend:
    image: openjdk:17-jdk-slim
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/magicain
      - SPRING_DATASOURCE_USERNAME=magicain
      - SPRING_DATASOURCE_PASSWORD=magicain123
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      - ELASTICSEARCH_HOST=elasticsearch
      - ELASTICSEARCH_PORT=9200
      - LANGFUSE_HOST=langfuse
      - LANGFUSE_PORT=3000
    depends_on:
      - postgres
      - redis
      - elasticsearch
    networks:
      - magicain-network
    restart: unless-stopped

  # PostgreSQL with PgVector
  postgres:
    image: docker.m.daocloud.io/pgvector/pgvector:pg16
    environment:
      - POSTGRES_DB=magicain
      - POSTGRES_USER=magicain
      - POSTGRES_PASSWORD=magicain123
    volumes:
      - postgres_data:/work/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - magicain-network
    restart: unless-stopped

  # Redis
  redis:
    image: docker.m.daocloud.io/redis:7-alpine
    volumes:
      - redis_data:/data
    networks:
      - magicain-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    volumes:
      - es_data:/usr/share/elasticsearch/data
    networks:
      - magicain-network
    restart: unless-stopped

  # ClickHouse - Langfuse Analytics Database
  clickhouse:
    image: docker.m.daocloud.io/clickhouse/clickhouse-server:latest
    environment:
      - CLICKHOUSE_DB=magicain
      - CLICKHOUSE_USER=magicain
      - CLICKHOUSE_PASSWORD=magicain123
      - CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT=1
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./database/clickhouse/init:/docker-entrypoint-initdb.d
    networks:
      - magicain-network
    restart: unless-stopped

  # Langfuse - AI Agent Monitoring
  langfuse-worker:
    image: docker.m.daocloud.io/langfuse/langfuse-worker:3
    environment:
      - DATABASE_URL=postgresql://magicain:magicain123@postgres:5432/langfuse
      - CLICKHOUSE_URL=http://clickhouse:8123
      - CLICKHOUSE_MIGRATION_URL=clickhouse://clickhouse:9000
      - CLICKHOUSE_USER=magicain
      - CLICKHOUSE_PASSWORD=magicain123
      - CLICKHOUSE_DB=langfuse
      - NEXTAUTH_SECRET=your-secret-key-here
      - TELEMETRY_ENABLED=false
    depends_on:
      - postgres
      - clickhouse
    networks:
      - magicain-network
    restart: unless-stopped

  langfuse-web:
    image: docker.m.daocloud.io/langfuse/langfuse:3
    restart: always
    depends_on: *langfuse-depends-on
    ports:
      - 3000:3000
    environment:
      <<: *langfuse-worker-env
      NEXTAUTH_SECRET: mysecret # CHANGEME
      LANGFUSE_INIT_ORG_ID: ${LANGFUSE_INIT_ORG_ID:-}
      LANGFUSE_INIT_ORG_NAME: ${LANGFUSE_INIT_ORG_NAME:-}
      LANGFUSE_INIT_PROJECT_ID: ${LANGFUSE_INIT_PROJECT_ID:-}
      LANGFUSE_INIT_PROJECT_NAME: ${LANGFUSE_INIT_PROJECT_NAME:-}
      LANGFUSE_INIT_PROJECT_PUBLIC_KEY: ${LANGFUSE_INIT_PROJECT_PUBLIC_KEY:-}
      LANGFUSE_INIT_PROJECT_SECRET_KEY: ${LANGFUSE_INIT_PROJECT_SECRET_KEY:-}
      LANGFUSE_INIT_USER_EMAIL: ${LANGFUSE_INIT_USER_EMAIL:-}
      LANGFUSE_INIT_USER_NAME: ${LANGFUSE_INIT_USER_NAME:-}
      LANGFUSE_INIT_USER_PASSWORD: ${LANGFUSE_INIT_USER_PASSWORD:-}

  # Prometheus - Metrics Collection
  prometheus:
    image: docker.m.daocloud.io/prom/prometheus:latest
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - magicain-network
    restart: unless-stopped

  # Grafana - Metrics Visualization
  grafana:
    image: docker.m.daocloud.io/grafana/grafana:latest
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - magicain-network
    restart: unless-stopped

  # Node Exporter - System Metrics
  node-exporter:
    image: docker.m.daocloud.io/prom/node-exporter:latest
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - magicain-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  es_data:
  clickhouse_data:
  prometheus_data:
  grafana_data:

networks:
  magicain-network:
    driver: bridge